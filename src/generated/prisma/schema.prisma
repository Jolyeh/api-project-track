generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum RoleScope {
  ORGANIZATION
  PROJECT
}

enum StatusType {
  PROJECT
  TASK
  SUB_TASK
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  organizationsOwned Organization[] @relation("OrgOwner")
  members            Member[]
  participants       Participant[]
  tasksAssigned      Task[]         @relation("TaskAssignee")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  owner    User      @relation("OrgOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  Member[]
  projects Project[]
}

model Member {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  roleId         String   @map("role_id")
  joinedAt       DateTime @default(now()) @map("joined_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([userId, organizationId], name: "unique_user_organization")
}

model Project {
  id             String    @id @default(uuid())
  name           String
  description    String?
  deadline       DateTime?
  statusId       String    @map("status_id")
  organizationId String    @map("organization_id")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  status       Status        @relation("ProjectStatus", fields: [statusId], references: [id], onDelete: Restrict)
  participants Participant[]
  tasks        Task[]
}

model Participant {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  roleId    String   @map("role_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([userId, projectId], name: "unique_user_project")
}

model Task {
  id          String    @id @default(uuid())
  projectId   String    @map("project_id")
  title       String
  description String?
  statusId    String    @map("status_id")
  assignedTo  String?   @map("assigned_to")
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status   Status    @relation("TaskStatus", fields: [statusId], references: [id], onDelete: Restrict)
  assignee User?     @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  subTasks SubTask[]
}

model SubTask {
  id        String   @id @default(uuid())
  taskId    String   @map("task_id")
  title     String
  statusId  String   @map("status_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status Status @relation("SubTaskStatus", fields: [statusId], references: [id], onDelete: Restrict)
}

model Role {
  id          String    @id @default(uuid())
  name        String
  scope       RoleScope
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  members      Member[]
  participants Participant[]
}

model Status {
  id        String     @id @default(uuid())
  name      String
  type      StatusType
  color     String?
  createdAt DateTime   @default(now()) @map("created_at")

  // Relations
  projects Project[] @relation("ProjectStatus")
  tasks    Task[]    @relation("TaskStatus")
  subTasks SubTask[] @relation("SubTaskStatus")
}
